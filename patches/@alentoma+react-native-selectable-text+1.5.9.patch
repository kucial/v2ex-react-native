diff --git a/node_modules/@alentoma/react-native-selectable-text/demo/SelectableText.tsx b/node_modules/@alentoma/react-native-selectable-text/demo/SelectableText.tsx
index a2f714a..4ce19d9 100644
--- a/node_modules/@alentoma/react-native-selectable-text/demo/SelectableText.tsx
+++ b/node_modules/@alentoma/react-native-selectable-text/demo/SelectableText.tsx
@@ -1,41 +1,56 @@
 import React, { ReactNode } from 'react'
-import { Text, requireNativeComponent, Platform, TextStyle, StyleProp, TextProps, TextInputProps, ColorValue } from 'react-native'
+import {
+  Text,
+  requireNativeComponent,
+  Platform,
+  TextStyle,
+  StyleProp,
+  TextProps,
+  TextInputProps,
+  ColorValue
+} from 'react-native'
 import { v4 } from 'uuid'
 import memoize from 'fast-memoize'
 
-
 const RNSelectableText = requireNativeComponent('RNSelectableText')
 export interface IHighlights {
-  start: number,
-  end: number,
-  id: string,
+  start: number
+  end: number
+  id: string
   color?: ColorValue
 }
 
-export interface NativeEvent {
-  content: string,
-  eventType: string,
-  selectionStart: number,
+export interface NativeSelectionEvent {
+  content: string
+  eventType: string
+  selectionStart: number
   selectionEnd: number
 }
+
+export interface NativeLinkPressEvent {
+  url: string
+  interaction: string
+}
+
 export interface SelectableTextProps {
-  value: string;
+  value: string
   onSelection: (args: {
-    eventType: string;
-    content: string;
-    selectionStart: number;
-    selectionEnd: number;
-  }) => void;
-  prependToChild: ReactNode;
-  menuItems: string[];
-  highlights?: Array<IHighlights>;
-  highlightColor?: ColorValue;
-  style?: StyleProp<TextStyle>;
-  onHighlightPress?: (id: string) => void;
-  appendToChildren?: ReactNode;
-  TextComponent?: ReactNode;
-  textValueProp?: string;
-  textComponentProps?: TextProps | TextInputProps;
+    eventType: string
+    content: string
+    selectionStart: number
+    selectionEnd: number
+  }) => void
+  prependToChild: ReactNode
+  menuItems: string[]
+  highlights?: Array<IHighlights>
+  highlightColor?: ColorValue
+  style?: StyleProp<TextStyle>
+  onHighlightPress?: (id: string) => void
+  onUrlPress?: (payload: NativeLinkPressEvent) => void
+  appendToChildren?: ReactNode
+  TextComponent?: ReactNode
+  textValueProp?: string
+  textComponentProps?: TextProps | TextInputProps
 }
 
 /**
@@ -48,7 +63,7 @@ const combineHighlights = memoize((numbers: IHighlights[]) => {
       if (!combined.length || combined[combined.length - 1].end < next.start)
         combined.push(next)
       else {
-        var prev = combined.pop();
+        var prev = combined.pop()
         if (prev)
           combined.push({
             start: prev.start,
@@ -68,9 +83,19 @@ const combineHighlights = memoize((numbers: IHighlights[]) => {
 const mapHighlightsRanges = (value: string, highlights: IHighlights[]) => {
   const combinedHighlights = combineHighlights(highlights)
 
-  if (combinedHighlights.length === 0) return [{ isHighlight: false, text: value, id: undefined, color: undefined }]
-
-  const data = [{ isHighlight: false, text: value.slice(0, combinedHighlights[0].start), id: combinedHighlights[0].id, color: combinedHighlights[0].color }]
+  if (combinedHighlights.length === 0)
+    return [
+      { isHighlight: false, text: value, id: undefined, color: undefined }
+    ]
+
+  const data = [
+    {
+      isHighlight: false,
+      text: value.slice(0, combinedHighlights[0].start),
+      id: combinedHighlights[0].id,
+      color: combinedHighlights[0].color
+    }
+  ]
 
   combinedHighlights.forEach(({ start, end, id, color }, idx) => {
     data.push({
@@ -92,12 +117,15 @@ const mapHighlightsRanges = (value: string, highlights: IHighlights[]) => {
 
   data.push({
     isHighlight: false,
-    text: value.slice(combinedHighlights[combinedHighlights.length - 1].end, value.length),
+    text: value.slice(
+      combinedHighlights[combinedHighlights.length - 1].end,
+      value.length
+    ),
     id: combinedHighlights[combinedHighlights.length - 1].id,
     color: combinedHighlights[combinedHighlights.length - 1].color
   })
 
-  return data.filter(x => x.text)
+  return data.filter((x) => x.text)
 }
 
 /**
@@ -112,62 +140,97 @@ const mapHighlightsRanges = (value: string, highlights: IHighlights[]) => {
  * TextComponent: ReactNode
  * textComponentProps: object
  */
-export const SelectableText = ({ onSelection, onHighlightPress, textValueProp, value, TextComponent, textComponentProps, prependToChild, ...props }: SelectableTextProps) => {
-  const TX = (TextComponent = TextComponent || Text) as Function;
-  textValueProp = textValueProp || 'children';  // default to `children` which will render `value` as a child of `TextComponent`
+export const SelectableText = ({
+  onSelection,
+  onHighlightPress,
+  onUrlPress,
+  textValueProp,
+  value,
+  TextComponent,
+  textComponentProps,
+  prependToChild,
+  ...props
+}: SelectableTextProps) => {
+  const TX = (TextComponent = TextComponent || Text) as Function
+  textValueProp = textValueProp || 'children' // default to `children` which will render `value` as a child of `TextComponent`
   const onSelectionNative = (event: any) => {
-    var nativeEvent = event.nativeEvent as NativeEvent
-    onSelection && onSelection(nativeEvent);
+    var nativeEvent = event.nativeEvent as NativeSelectionEvent
+    onSelection && onSelection(nativeEvent)
   }
 
   const onHighlightPressNative = onHighlightPress
     ? Platform.OS === 'ios'
-      ? (
-        {
-          nativeEvent: { clickedRangeStart, clickedRangeEnd }
-        }) => {
-        if (!props.highlights || props.highlights.length === 0) return
-        const mergedHighlights = combineHighlights(props.highlights)
-
-        const hightlightInRange = mergedHighlights.find(
-          ({ start, end }) => clickedRangeStart >= start - 1 && clickedRangeEnd <= end + 1,
-        )
-
-        if (hightlightInRange) {
-          onHighlightPress(hightlightInRange.id)
+      ? ({ nativeEvent: { clickedRangeStart, clickedRangeEnd } }) => {
+          if (!props.highlights || props.highlights.length === 0) return
+          const mergedHighlights = combineHighlights(props.highlights)
+
+          const hightlightInRange = mergedHighlights.find(
+            ({ start, end }) =>
+              clickedRangeStart >= start - 1 && clickedRangeEnd <= end + 1
+          )
+
+          if (hightlightInRange) {
+            onHighlightPress(hightlightInRange.id)
+          }
         }
-      }
       : onHighlightPress
-    : () => { }
+    : () => {}
+
+  const onUrlPressNative = onUrlPress
+    ? Platform.OS === 'ios'
+      ? (event: any) => {
+          var nativeEvent = event.nativeEvent as NativeLinkPressEvent
+          onUrlPress(nativeEvent)
+        }
+      : onUrlPress
+    : () => {}
 
   // highlights feature is only supported if `TextComponent == Text`
-  let textValue = value as any;
+  let textValue = value as any
   if (TextComponent == Text) {
-    textValue = (
+    textValue =
       props.highlights && props.highlights.length > 0
-        ? mapHighlightsRanges(value, props.highlights).map(({ id, isHighlight, text, color }) => (
-          <Text key={v4()} {...textComponentProps} selectable={true} style={isHighlight ? { backgroundColor: color ?? props.highlightColor } : {}} onPress={() => {
-            if (textComponentProps && textComponentProps.onPress)
-              textComponentProps.onPress();
-            if (isHighlight) {
-              onHighlightPress && onHighlightPress(id ?? "")
-            }
-          }}>
-            {text} </Text>
-        ))
+        ? mapHighlightsRanges(value, props.highlights).map(
+            ({ id, isHighlight, text, color }) => (
+              <Text
+                key={v4()}
+                {...textComponentProps}
+                selectable={true}
+                style={
+                  isHighlight
+                    ? { backgroundColor: color ?? props.highlightColor }
+                    : {}
+                }
+                onPress={() => {
+                  if (textComponentProps && textComponentProps.onPress)
+                    textComponentProps.onPress()
+                  if (isHighlight) {
+                    onHighlightPress && onHighlightPress(id ?? '')
+                  }
+                }}>
+                {text}{' '}
+              </Text>
+            )
+          )
         : [value]
-    );
     if (props.appendToChildren) {
-      textValue.push(props.appendToChildren);
+      textValue.push(props.appendToChildren)
     }
 
-    if (prependToChild)
-      textValue = [prependToChild, ...textValue];
+    if (prependToChild) textValue = [prependToChild, ...textValue]
   }
 
   return (
-    <RNSelectableText {...props} onHighlightPress={onHighlightPressNative} selectable={true} onSelection={onSelectionNative} >
-      <TX key={v4()} {...{ [textValueProp]: textValue, ...textComponentProps }} />
+    <RNSelectableText
+      {...props}
+      onHighlightPress={onHighlightPressNative}
+      selectable={true}
+      onSelection={onSelectionNative}
+      onUrlPress={onUrlPressNative}>
+      <TX
+        key={v4()}
+        {...{ [textValueProp]: textValue, ...textComponentProps }}
+      />
     </RNSelectableText>
   )
 }
diff --git a/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextManager.h b/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextManager.h
index fdef614..8bbdf97 100644
--- a/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextManager.h
+++ b/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextManager.h
@@ -1,8 +1,8 @@
-#if __has_include(<RCTText/RCTBaseTextInputViewManager.h>)
-#import <RCTText/RCTBaseTextInputViewManager.h>
-#else
-#import "RCTBaseTextInputViewManager.h"
-#endif
+// #if __has_include(<RCTText/RCTBaseTextInputViewManager.h>)
+// #import <RCTText/RCTBaseTextInputViewManager.h>
+// #else
+#import <React/RCTBaseTextInputViewManager.h>
+// #endif
 
 NS_ASSUME_NONNULL_BEGIN
 
diff --git a/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextManager.m b/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextManager.m
index bf58b0e..d98d410 100644
--- a/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextManager.m
+++ b/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextManager.m
@@ -15,6 +15,7 @@ - (UIView *)view
 RCT_EXPORT_VIEW_PROPERTY(menuItems, NSArray);
 RCT_EXPORT_VIEW_PROPERTY(value, NSString);
 RCT_EXPORT_VIEW_PROPERTY(onHighlightPress, RCTDirectEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onUrlPress, RCTDirectEventBlock)
 
 #pragma mark - Multiline <TextInput> (aka TextView) specific properties
 
diff --git a/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextView.h b/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextView.h
index 5770684..65db09b 100644
--- a/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextView.h
+++ b/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextView.h
@@ -1,8 +1,8 @@
-#if __has_include(<RCTText/RCTBaseTextInputView.h>)
-#import <RCTText/RCTBaseTextInputView.h>
-#else
-#import "RCTBaseTextInputView.h"
-#endif
+// #if __has_include(<RCTText/RCTBaseTextInputView.h>)
+// #import <RCTText/RCTBaseTextInputView.h>
+// #else
+#import <React/RCTBaseTextInputView.h>
+// #endif
 
 NS_ASSUME_NONNULL_BEGIN
 
@@ -12,6 +12,7 @@ NS_ASSUME_NONNULL_BEGIN
 @property (nonatomic, copy) RCTDirectEventBlock onSelection;
 @property (nullable, nonatomic, copy) NSArray<NSString *> *menuItems;
 @property (nonatomic, copy) RCTDirectEventBlock onHighlightPress;
+@property (nonatomic, copy) RCTDirectEventBlock onUrlPress;
 
 @end
 
diff --git a/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextView.m b/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextView.m
index eb5e69e..d28e2ab 100644
--- a/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextView.m
+++ b/node_modules/@alentoma/react-native-selectable-text/ios/RNSelectableTextView.m
@@ -1,23 +1,23 @@
-#if __has_include(<RCTText/RCTTextSelection.h>)
-#import <RCTText/RCTTextSelection.h>
-#else
-#import "RCTTextSelection.h"
-#endif
-
-#if __has_include(<RCTText/RCTUITextView.h>)
-#import <RCTText/RCTUITextView.h>
-#else
-#import "RCTUITextView.h"
-#endif
+// #if __has_include(<RCTText/RCTTextSelection.h>)
+// #import <RCTText/RCTTextSelection.h>
+// #else
+#import <React/RCTTextSelection.h>
+// #endif
+
+// #if __has_include(<RCTText/RCTUITextView.h>)
+// #import <RCTText/RCTUITextView.h>
+// #else
+#import <React/RCTUITextView.h>
+// #endif
+
+// #if __has_include(<RCTText/RCTTextAttributes.h>)
+// #import <RCTText/RCTTextAttributes.h>
+// #else
+#import <React/RCTTextAttributes.h>
+// #endif
 
 #import "RNSelectableTextView.h"
 
-#if __has_include(<RCTText/RCTTextAttributes.h>)
-#import <RCTText/RCTTextAttributes.h>
-#else
-#import "RCTTextAttributes.h"
-#endif
-
 #import <React/RCTUtils.h>
 
 @implementation RNSelectableTextView
@@ -25,7 +25,7 @@ @implementation RNSelectableTextView
     RCTUITextView *_backedTextInputView;
 }
 
-NSString *const CUSTOM_SELECTOR = @"_CUSTOM_SELECTOR_";
+NSString *const S_CUSTOM_SELECTOR = @"_S_CUSTOM_SELECTOR_";
 
 UITextPosition *selectionStart;
 UITextPosition* beginning;
@@ -34,49 +34,59 @@ - (instancetype)initWithBridge:(RCTBridge *)bridge
 {
     if (self = [super initWithBridge:bridge]) {
         // `blurOnSubmit` defaults to `false` for <TextInput multiline={true}> by design.
-        self.blurOnSubmit = NO;
+        // NOTE: react-native 0.71 -- blurOnSubmit is replaced by submitBehavior
+        // self.blurOnSubmit = NO;
 
         _backedTextInputView = [[RCTUITextView alloc] initWithFrame:self.bounds];
         _backedTextInputView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
+        _backedTextInputView.textInputDelegate = self;
+
         _backedTextInputView.backgroundColor = [UIColor clearColor];
         _backedTextInputView.textColor = [UIColor blackColor];
         // This line actually removes 5pt (default value) left and right padding in UITextView.
         _backedTextInputView.textContainer.lineFragmentPadding = 0;
+        _backedTextInputView.textContainerInset = UIEdgeInsetsZero;
+
 #if !TARGET_OS_TV
         _backedTextInputView.scrollsToTop = NO;
 #endif
         _backedTextInputView.scrollEnabled = NO;
-        _backedTextInputView.textInputDelegate = self;
         _backedTextInputView.editable = NO;
         _backedTextInputView.selectable = YES;
+        // 处理显示不全的情况
+        _backedTextInputView.layoutManager.allowsNonContiguousLayout = NO;
+        // TODO: may handle default context menu from js
         _backedTextInputView.contextMenuHidden = YES;
 
+        // reset linkTextAttributes
+        _backedTextInputView.linkTextAttributes = [[NSDictionary alloc] init];
+
         beginning = _backedTextInputView.beginningOfDocument;
 
-        for (UIGestureRecognizer *gesture in [_backedTextInputView gestureRecognizers]) {
-            if (
-                [gesture isKindOfClass:[UIPanGestureRecognizer class]]
-            ) {
-                [_backedTextInputView setExclusiveTouch:NO];
-                gesture.enabled = YES;
-            } else {
-                gesture.enabled = NO;
-            }
-        }
+        // for (UIGestureRecognizer *gesture in [_backedTextInputView gestureRecognizers]) {
+        //     if (
+        //         [gesture isKindOfClass:[UIPanGestureRecognizer class]]
+        //     ) {
+        //         [_backedTextInputView setExclusiveTouch:NO];
+        //         gesture.enabled = YES;
+        //     } else {
+        //         gesture.enabled = NO;
+        //     }
+        // }
 
         [self addSubview:_backedTextInputView];
 
         UILongPressGestureRecognizer *longPressGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handleLongPress:)];
 
 
-        UITapGestureRecognizer *tapGesture = [ [UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTap:)];
-        tapGesture.numberOfTapsRequired = 2;
+        UITapGestureRecognizer *doubleTapGesture = [ [UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleDoubleTap:)];
+        doubleTapGesture.numberOfTapsRequired = 2;
 
         UITapGestureRecognizer *singleTapGesture = [ [UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleSingleTap:)];
         singleTapGesture.numberOfTapsRequired = 1;
 
         [_backedTextInputView addGestureRecognizer:longPressGesture];
-        [_backedTextInputView addGestureRecognizer:tapGesture];
+        [_backedTextInputView addGestureRecognizer:doubleTapGesture];
         [_backedTextInputView addGestureRecognizer:singleTapGesture];
 
         [self setUserInteractionEnabled:YES];
@@ -85,7 +95,7 @@ - (instancetype)initWithBridge:(RCTBridge *)bridge
     return self;
 }
 
--(void) _handleGesture
+-(void) _showMenu
 {
     if (!_backedTextInputView.isFirstResponder) {
         [_backedTextInputView becomeFirstResponder];
@@ -98,7 +108,7 @@ -(void) _handleGesture
     NSMutableArray *menuControllerItems = [NSMutableArray arrayWithCapacity:self.menuItems.count];
 
     for(NSString *menuItemName in self.menuItems) {
-        NSString *sel = [NSString stringWithFormat:@"%@%@", CUSTOM_SELECTOR, menuItemName];
+        NSString *sel = [NSString stringWithFormat:@"%@%@", S_CUSTOM_SELECTOR, menuItemName];
         UIMenuItem *item = [[UIMenuItem alloc] initWithTitle: menuItemName
                                                       action: NSSelectorFromString(sel)];
 
@@ -112,24 +122,56 @@ -(void) _handleGesture
 
 -(void) handleSingleTap: (UITapGestureRecognizer *) gesture
 {
-    CGPoint pos = [gesture locationInView:_backedTextInputView];
-    pos.y += _backedTextInputView.contentOffset.y;
-    
-    UITextPosition *tapPos = [_backedTextInputView closestPositionToPoint:pos];
-    UITextRange *word = [_backedTextInputView.tokenizer rangeEnclosingPosition:tapPos withGranularity:(UITextGranularityWord) inDirection:UITextLayoutDirectionRight];
-    
-    UITextPosition* beginning = _backedTextInputView.beginningOfDocument;
-    
-    UITextPosition *selectionStart = word.start;
-    UITextPosition *selectionEnd = word.end;
-    
-    const NSInteger location = [_backedTextInputView offsetFromPosition:beginning toPosition:selectionStart];
-    const NSInteger endLocation = [_backedTextInputView offsetFromPosition:beginning toPosition:selectionEnd];
-    
-    self.onHighlightPress(@{
-        @"clickedRangeStart": @(location),
-        @"clickedRangeEnd": @(endLocation),
-    });
+    UITextView *textView = _backedTextInputView;
+	CGPoint tapLocation = [gesture locationInView:textView];
+
+	// we need to get two positions since attributed links only apply to ranges with a length > 0
+	UITextPosition *textPosition1 = [textView closestPositionToPoint:tapLocation];
+	UITextPosition *textPosition2 = [textView positionFromPosition:textPosition1 offset:1];
+
+	// check if we're beyond the max length and go back by one
+	if (!textPosition2) {
+		textPosition1 = [textView positionFromPosition:textPosition1 offset:-1];
+		textPosition2 = [textView positionFromPosition:textPosition1 offset:1];
+	}
+
+	// abort if we still don't have a string that's long enough
+	if (!textPosition2) {
+		return;
+	}
+
+	// get the offset range of the character we tapped on
+	UITextRange *range = [textView textRangeFromPosition:textPosition1 toPosition:textPosition2];
+	NSInteger startOffset = [textView offsetFromPosition:textView.beginningOfDocument toPosition:range.start];
+	NSInteger endOffset = [textView offsetFromPosition:textView.beginningOfDocument toPosition:range.end];
+	NSRange offsetRange = NSMakeRange(startOffset, endOffset - startOffset);
+
+	if (offsetRange.location == NSNotFound || offsetRange.length == 0) {
+		return;
+	}
+
+	if (NSMaxRange(offsetRange) > textView.attributedText.length) {
+		return;
+	}
+
+	// now grab the link from the string
+	NSAttributedString *attributedSubstring = [textView.attributedText attributedSubstringFromRange:offsetRange];
+	NSString *link = [attributedSubstring attribute:NSLinkAttributeName atIndex:0 effectiveRange:nil];
+
+	if (!link) {
+		return;
+	}
+
+	NSURL *URL = [NSURL URLWithString:link];
+
+	if (textView.delegate && [textView.delegate respondsToSelector:@selector(textView:shouldInteractWithURL:inRange:interaction:)]) {
+		// abort if the delegate doesn't allow us to open this URL
+		if (![textView.delegate textView:textView shouldInteractWithURL:URL inRange:offsetRange interaction:UITextItemInteractionInvokeDefaultAction]) {
+			return;
+		}
+	}
+
+    [[UIApplication sharedApplication] openURL:URL];
 }
 
 -(void) handleLongPress: (UILongPressGestureRecognizer *) gesture
@@ -150,7 +192,7 @@ -(void) handleLongPress: (UILongPressGestureRecognizer *) gesture
             break;
         case UIGestureRecognizerStateEnded:
             selectionStart = nil;
-            [self _handleGesture];
+            [self _showMenu];
             return;
 
         default:
@@ -162,25 +204,32 @@ -(void) handleLongPress: (UILongPressGestureRecognizer *) gesture
     const NSInteger location = [_backedTextInputView offsetFromPosition:beginning toPosition:selectionStart];
     const NSInteger endLocation = [_backedTextInputView offsetFromPosition:beginning toPosition:selectionEnd];
 
+    NSLog(@"Loaction: [%d, %d]", location, endLocation);
     if (location == 0 && endLocation == 0) return;
+    if (endLocation == 0) return;
+    const NSInteger start = MIN(location, endLocation);
+    const NSInteger length = abs(endLocation - location);
+    if (length < 0) return;
+    NSLog(@"RANGE: [%d, %d]", start, length);
 
     [_backedTextInputView select:self];
-    [_backedTextInputView setSelectedRange:NSMakeRange(location, endLocation - location)];
+    [_backedTextInputView setSelectedRange:NSMakeRange(start, length)];
 
 }
 
--(void) handleTap: (UITapGestureRecognizer *) gesture
+-(void) handleDoubleTap: (UITapGestureRecognizer *) gesture
 {
-    [_backedTextInputView select:self];
+    // [_backedTextInputView select:self];
     [_backedTextInputView selectAll:self];
-    [self _handleGesture];
+    [self _showMenu];
 }
 
 - (void)setAttributedText:(NSAttributedString *)attributedText
 {
+
     if (self.value) {
         NSAttributedString *str = [[NSAttributedString alloc] initWithString:self.value attributes:self.textAttributes.effectiveTextAttributes];
-        
+        NSLog(@"[selectable] %@", str);
         [super setAttributedText:str];
     } else {
         [super setAttributedText:attributedText];
@@ -220,7 +269,7 @@ - (NSMethodSignature *)methodSignatureForSelector:(SEL)sel
 - (void)forwardInvocation:(NSInvocation *)invocation
 {
     NSString *sel = NSStringFromSelector([invocation selector]);
-    NSRange match = [sel rangeOfString:CUSTOM_SELECTOR];
+    NSRange match = [sel rangeOfString:S_CUSTOM_SELECTOR];
     if (match.location == 0) {
         [self tappedMenuItem:[sel substringFromIndex:17]];
     } else {
@@ -237,7 +286,7 @@ - (BOOL)canPerformAction:(SEL)action withSender:(id)sender
 {
     if(selectionStart != nil) {return NO;}
     NSString *sel = NSStringFromSelector(action);
-    NSRange match = [sel rangeOfString:CUSTOM_SELECTOR];
+    NSRange match = [sel rangeOfString:S_CUSTOM_SELECTOR];
 
     if (match.location == 0) {
         return YES;
@@ -272,4 +321,30 @@ - (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
     return [super hitTest:point withEvent:event];
 }
 
+- (BOOL)textView:(UITextView *)textView shouldInteractWithURL:(NSURL *)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction {
+
+    NSString *action = @"";
+    switch (interaction) {
+        case UITextItemInteractionPreview:
+            action = @"preview";
+            break;
+        case UITextItemInteractionPresentActions:
+            action = @"present";
+            break;
+        case UITextItemInteractionInvokeDefaultAction:
+        default:
+            action = @"default";
+            break;
+    }
+
+    if (URL) {
+        self.onUrlPress(@{
+            @"url": URL.absoluteString,
+            @"interaction": action,
+        });
+    }
+
+    return NO;
+}
+
 @end
